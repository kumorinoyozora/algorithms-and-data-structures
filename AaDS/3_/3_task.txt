Таблицы


Написать программу для работы с таблицей, использующей два пространства ключей, по запросам оператора.
Каждый элемент таблицы имеет следующую структуру:

struct Item{
		InfoType *info;		
		/* указатель на информацию					*/
		RelType release;
		/* версия элемента						*/
		Item *next;
		/* указатель на следующий элемент с данным составным ключем	*/

/*	а также может содержать опциональные поля, для оптимизации выполнения операций, 	*/
/*	при этом их состав и наличие выбираются исходя из целесообразности, 			*/
/*	среди данных полей могут быть:								*/

		KeyType1 	key1;	
		/* ключ элемента из 1-го пространства ключей;			*/
		KeyType2 	key2;	
		/* ключ элемента из 2-го пространства ключей;			*/
		IndexType1 	ind1;	
		/* связь с элементом 1-го пространства ключей по индексу;	*/
		IndexType2 	ind2;	
		/* связь с элементом 2-го пространства ключей по индексу;	*/
		PointerType1	*p1;	
		/* связь с элементом 2-го пространства ключей по указателю;	*/
		PointerType2	*p2;	
		/* связь с элементом 2-го пространства ключей по указателю;	*/

};

В таблице могут быть элементы с одинаковым составными ключами (key1, key2) и разными номерами версий (номер версии элемента формируется как порядковый номер элемента в последовательности элементов с одинаковыми ключами, определяемый при включении элемента в таблицу).
Первое пространство ключей организовано как просматриваемая таблица, организованная вектором; каждый элемент таблицы имеет следующую структуру:

struct KeySpace1{
		KeyType1 key;			/* ключ элемента				*/
		Node1 *node;			/* указатель на информацию			*/
};

Максимальный размер пространства ключей ограничен msize1, определяемый при инициализации таблицы.

Указатель на информацию определяет список элементов с одинаковыми значениями ключей. Элемент списка имеет следующую структуру:

 struct Node1{
		RelType1 release;	/* номер версии						*/
		Item *info;		/* указатель на информацию				*/
		Node1 *next;		/* указатель на следующий элемент			*/
};

В пространстве могут находиться несколько элементов с одинаковыми ключами и разными номерами версий (номер версии элемента формируется как порядковый номер элемента в последовательности элементов с одинаковыми ключами, определяемый при включении элемента в таблицу)

В данном пространстве ключей предусмотрены следующие особые операции:
-	поиск в таблице всех версий элемента, заданного ключом, или конкретной (заданной) версии элемента, также заданного своим ключом; результатом поиска должна быть новая таблица, содержащая найденные элементы;
-	удаление из таблицы всех элементов с заданным ключом или элемента определенной версии, также заданного своим ключом.

Второе пространство ключей организовано как перемешанная таблица, использующая перемешивание сцеплением.
Перемешанная таблица представлена массивом указателей на элементы таблицы, имеющие следующую структуру:

struct KeySpace2{
		KeyType2 key;		/* ключ элемента			*/
		InfoType *info;		/* указатель на информацию		*/
		KeySpace2 *next;	/* указатель на следующий элемент	*/

};

Максимальный размер массива указателей ограничен msize2, определяемый при инициализации таблицы. 
В пространстве не может быть двух элементов с одинаковыми ключами.

В данном пространстве ключей особые операции не предусмотрены.
Таблица задается структурой:
struct Table{
		KeySpace1 	*ks1;	
		/* указатель на первое пространство ключей			*/
		KeySpace2 	*ks2;
		/* указатель на второе пространство ключей			*/
/*также может содержать опциональные поля, ограничивающие размер пространства ключей		*/
/*при этом их наличие определяется типом организации соответствующего пространства, 		*/
/*(см. предыдущие пункт задания):								*/

		IndexType1 	msize1;
		/* размер области 1-го пространства ключей 			*/
		IndexType2 	msize2;
		/* размер области 2-го пространства ключей 			*/

/*также может содержать опциональные поля с текущим количеством элементов в пространстве ключей	*/
/*при этом их наличие определяется типом организации соответствующего пространства, 		*/
/*(см. предыдущие пункт задания):								*/

		IndexType1 	сsize1;
		/* количество элементов в области 1-го пространства ключей	*/
		IndexType2 	сsize2;
		/* количество элементов в области 1-го пространства ключей	*/
};

Предусмотреть следующие операции:
-	включение нового элемента в таблицу с соблюдением ограничений на уникальность ключей в соответствующих ключевых пространствах (см. предыдущие пункты задания) и уникальности составного ключа (key1, key2);
-	поиск в таблице элемента, заданного составным ключом;
-	удаление из таблицы элемента, заданного составным ключом;
-	поиск в таблице элемента по любому заданному ключу; результатом поиска должна быть копии всех найденных элементов со значениями ключей; *(дополнительно) поиск может быть реализован как итератор одним из возможных способов, например, в этом случае метод возвращает один из возможных элементов, повторный вызов следующий элемент и т.д. 
-	удаление из таблицы всех элементов, заданного ключом в одном из ключевых пространств;
-	вывод содержимого таблицы на экран (или текстовый файл); при этом формат вывода должен соответствовать приведенной выше структуре элемента таблицы;
-	особые операции, определяемые в соответствующем пространстве ключей.

Если при выполнении операций с таблицами возникает ошибочная ситуация, на экран должно быть выведено соответствующее сообщение об ошибке. При этом функции для работы с таблицей, не должны быть диалоговыми, т.е. должны принимать все необходимые данные в качестве параметров и возвращать результат работы в виде соответствующих структур данных (за исключением функции вывода на экран / текстовый файл) и коды ошибок. Диалоговые функции, реализующие работу пользователя с таблицей, должны использовать данные функции (принцип отделения интерфейса, MVC).
Разработать следующие варианты программы:

a)	и сама таблица, и информация, относящаяся к элементу таблицы, хранятся в основной памяти;
b)	и сама таблица, и информация, относящаяся к элементу таблицы, хранятся во внешней памяти (используется двоичный файл произвольного доступа). Описатель таблицы и описатели пространств ключей считывается из файла (или создается в первый раз) в начале сеанса работы и записывается в файл в конце сеанса работы. Информация, относящаяся к элементу таблицы, записывается в файл сразу же при выполнении операции включения в таблицу и в основной памяти не хранится, возможно за исключением элемента, с которым производится текущая операция. Все операции выполняются с описателем таблицы и пространств ключей, размещенными в основной памяти. Все структуры данных модифицируются соответствующим образом (замена указателей на смещение в файле и т.п.). Имя файла вводится по запросу из программы и хранится в описателе таблицы.
c)	**(дополнительно) аналогично пункту b, но все операции выполняются с пространствами ключей, размещенными во внешней памяти, в основной памяти может храниться только описатель таблицы.
d)	***(дополнительно) аналогично пункту с, но с реализацией буферизации файловых операций (можно считывать и записывать по несколько записей) и кеширования записей (тип кэша и стратегии управления кэшем выбираются по согласованию с преподавателем)

Примечания:

1.	Программа должна содержать несколько функций; функция main должна выполнять: вывод меню, ввод и анализ ответа, вызов на исполнение требуемой функции;
2.	В программе нужно предусмотреть проверку правильности ввода данных;
3.	Для варианта b, с и d следует модифицировать структуру, определяющую элемент таблицы, включив  в нее длину информации и ее смещение в файле;
4.	В варианте b, c и d для работы с файлом использовать функции пакета stdio.h; чтение и запись выполнять с помощью fread() и fwrite(), в которых должна быть указана реальная длина информации.
5.	Возможна реализация программы в упрощенным виде только с одним пространством ключей (выбирается из основного задания по согласованию с преподавателем) и упрощением структур данных, задающих таблицу; в этом случае за задачу ставится не более 60% от возможных баллов.