Сбалансированные деревья


Типы ключевых пространств и информации

Ключами являются:  
  
Ключ (все ключи если несколько) - "an unsigned integer".
Информация - "a record of two integer numbers and a string with variable length (null-terminated)".

Примечание: для Q и kd-деревьев в качестве ключа всегда использовать целые знаковые числа (an integer) вне зависимости от данного пункта задания.

Написать программу для работы по запросам оператора с упорядоченной таблицей в двух ключевом ограниченном пространстве, реализованной в виде kd-дерева поиска. Количество элементов на одном уровне ограничено числом N. 
Узел дерева содержит граничное значение, указатели на правое и левое поддеревья и указатель на начало списка элементов (ключи + информация) в порядке возрастания основных ключей на текущем уровне. Данные хранятся только в листьях дерева.
В таблице не могут храниться записи с одинаковыми ключами.
Предусмотреть следующие операции:
Включение нового элемента в таблицу без нарушения свойств упорядоченности; если информация с заданным ключом уже есть, но дублирование ключей не допускается, то изменяется значение информационного поля, а старое возвращается в качестве результата.
Удаление  из  таблицы  элемента, заданного своим ключом, без нарушения свойств упорядоченности таблицы (если элементов несколько, то указывается номер удаляемого элемента).
Поиск информации по заданному ключу; если элементов с одинаковым ключем может быть несколько, указывается порядковый номер искомого элемента; возврат осуществлять при помощи указателя, возврат копий элементов не допускается.
Вывод всего содержимого таблицы в обратном порядке следования ключей, превышающих заданный (если ключ не указан - вывод всей таблицы; если ключа два - можно указать оба ключа, только первый, только второй или не указать ни одного).
Поиск элемента, соответствующего значению наибольшего ключа, не превышающего заданное значение. (если таких элементов несколько – действовать по аналогии с операцией поиска по ключу).
Для Q и kd-деревьев – поиск элемента, расположенного наиболее близко к заданным ключам согласно евклидовому расстоянию, и значения всех ключей которого не превышают значения заданных ключей.
Примечания:
1. Программа  должна  содержать несколько функций;  функция main() должна выполнять: вывод меню, ввод и анализ  ответа,  вызов  на исполнение требуемой функции.
2. В программе нужно предусмотреть проверку правильности ввода данных.
3. Оценить сложность реализованных алгоритмов.
4. Для целей отладки реализовать форматированный вывод таблицы в виде дерева.
5. Для целей отладки реализовать загрузку таблицы из файла в формате
   • Ключ1
   • Инофрмация1
   • Ключ2
   • …
6. Провести таймирование (или профилирование) программы.
7. *(Дополнительно) Реализовать графический вывод таблицы (дерева) при помощи внешней библиотеки или внешнего инструмента (например, graphviz).
8. **(Дополнительно) При помощи реализованной таблицы (дерева) написать программу для быстрого поиска слова в текстовом файле (если ключ - строка) или числа типа (unsigned) integer в бинарном файле (если ключ - число). Результатом поиска является таблица с расположением всех вхождений заданного слова/числа в файле (если ключи не уникальны) или расположение первого вхождения заданного слова/числа в файле (если ключи уникальны). Расположение слова/числа представляет из себя совокупность номера строки и смещения слова в этой строке (для текстовых файлов) или смещение числа относительно начала файла (для бинарных файлов).
Для выполнения данного пункта задания разрешается изменить тип хранимых в таблице данных (Info).
9. **(Дополнительно) Доступ к элементам таблицы (дерева) реализовать через дополнительный кэш-буфер, реализованный в виде хэш-таблицы. Размер кэш-буфера ограничен числом N.