Графы


Написать программу для работы  по запросам оператора с ориентированным взвешенным графом. Каждая вершина графа имеет уникальное имя и задается координатами на плоскости {x, y}. Граф задается списками смежностей. Вес ребра графа определяется расстоянием между соответствующими вершинами графа.
Предусмотреть следующие операции:

добавление новой вершины в граф;
добавление в граф нового ребра между двумя заданными вершинами, с необходимым вычислением веса ребра (в случае взвешенного графа);
удаление заданной вершины из графа; при этом удаляются и все ребра, связанные с удаляемой вершиной;
удаление заданного ребра из графа;
вывод графа;
поиск некоторой заданной вершины из другой заданной вершины методом поиска в глубину (если пути между вершинами нет, вернуть соответствующий код ошибки);
поиск кратчайшего пути между двумя заданными вершинами графа, используя алгоритм Беллмана — Форда (если граф не взвешенный, считать вес каждого ребра равным единице);
поиск первых трех кратчайших путей между двумя любыми вершинами графа (см алгоритмы Флойда-Воршалла; если граф не взвешенный, считать вес каждого ребра равным единице).
    1. Программа  должна  содержать несколько функций;  функция main() должна выполнять: вывод меню, ввод и анализ  ответа,  вызов  на исполнение требуемой функции.
    2. Программа должна генерировать граф заданного размера случайным образом.
    3. Граф должен храниться в файле; в начале сеанса работы он загружается из файла; если в процессе работы граф был изменен, новое состояние должно быть сохранено в файле.
    4. В программе нужно предусмотреть проверку правильности ввода данных.
    5. Оценить сложность реализованных алгоритмов.
    6. Провести таймирование (или профилирование) алгоритмов.
    7. *(Дополнительно) Реализовать графический вывод графа при помощи внешней библиотеки или внешнего инструмента (например, graphviz).
    8. **(Дополнительно) С использованием реализованого графа написать программу для поиска кратчайшего (по дистанции или по количеству транспортных узлов) пути между двумя точками на карте любого города/страны/штата (данные найти в интернете, например, https://www.cs.utah.edu/~lifeifei/SpatialDataset.htm). При выполнении данного пункта задания при необходимости разрешается не соблюдать свойство ацикличности графа.